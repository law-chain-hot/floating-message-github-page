{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/elements/Loader/Loader.js","components/Loader.js","../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","components/auth/Signup.js"],"names":["Loader","props","active","children","className","content","disabled","indeterminate","inline","inverted","size","classes","cx","useKeyOnly","useKeyOrValueAndKey","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","LoaderExampleInline","Divider","clearing","fitted","hidden","horizontal","section","vertical","SegmentGroup","compact","piled","raised","stacked","SegmentInline","Segment","attached","basic","circular","color","floated","loading","placeholder","padded","secondary","tertiary","textAlign","useTextAlignProp","useValueAndKey","Group","Inline","GridColumn","computer","largeScreen","mobile","only","stretched","tablet","verticalAlign","widescreen","width","useMultipleProp","useVerticalAlignProp","useWidthProp","create","createShorthandFactory","GridRow","centered","columns","divided","reversed","Grid","celled","container","doubling","relaxed","stackable","Column","Row","useStyles","makeStyles","login","margin","display","justifyContent","segment","btn","marin","header","padding","compose","connect","state","authenticated","auth","errorMessage","actions","loginWithRedirect","useAuth0","useState","email","setEmail","password","setPassword","loader","setLoader","handleSubmit","event","a","clearError","callback","history","push","postData","signup","preventDefault","id","onSubmit","Input","icon","iconPosition","label","type","value","onChange","e","target","primary","generateLoader","success","error","onClick"],"mappings":"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","file":"static/js/6.32faeb96.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\n/**\n * A loader alerts a user to wait for an activity to complete.\n * @see Dimmer\n */\n\nfunction Loader(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      disabled = props.disabled,\n      indeterminate = props.indeterminate,\n      inline = props.inline,\n      inverted = props.inverted,\n      size = props.size;\n  var classes = cx('ui', size, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), useKeyOnly(inverted, 'inverted'), useKeyOnly(children || content, 'text'), useKeyOrValueAndKey(inline, 'inline'), 'loader', className);\n  var rest = getUnhandledProps(Loader, props);\n  var ElementType = getElementType(Loader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nLoader.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"disabled\", \"indeterminate\", \"inline\", \"inverted\", \"size\"];\nLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A loader can be active or visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A loader can be disabled or hidden. */\n  disabled: PropTypes.bool,\n\n  /** A loader can show it's unsure of how long a task will take. */\n  indeterminate: PropTypes.bool,\n\n  /** Loaders can appear inline with content. */\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['centered'])]),\n\n  /** Loaders can have their colors inverted. */\n  inverted: PropTypes.bool,\n\n  /** Loaders can have different sizes. */\n  size: PropTypes.oneOf(SUI.SIZES)\n} : {};\nexport default Loader;","\n\nimport React from 'react'\nimport { Loader } from 'semantic-ui-react'\n\nconst LoaderExampleInline = () => <Loader active inline />\n\nexport default LoaderExampleInline","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf([].concat(SUI.WIDTHS, ['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf([].concat(SUI.WIDTHS, ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import React, { useState } from 'react'\nimport { reduxForm, Field } from 'redux-form';\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { Button, Divider, Form, Grid, Segment, Checkbox, Message } from 'semantic-ui-react'\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport * as actions from '../../reducers/actions'\n\nimport './Segment.css'\n\nimport Loader from '../Loader'\n\n\nconst useStyles = makeStyles({\n    login: {\n        // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        margin: '10px',\n        color: 'white',\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    segment: {\n        width: '70%'\n    },\n    btn: {\n        marin: '0 10px '\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'center',\n        padding: '20px'\n    },\n});\n\n\nconst Signup = (props) => {\n    const classes = useStyles();\n    const { loginWithRedirect } = useAuth0();\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [loader, setLoader] = useState(false)\n\n\n    const updateError = () => {\n        props.clearError()\n    }\n\n    const handleSubmit = async (event) => {\n        updateError()\n        const callback = () => props.history.push('/feature')\n        const postData = {\n            email: email,\n            password: password\n        }\n        setLoader(true)\n        await props.signup(postData, callback)\n        setLoader(false)\n\n        event.preventDefault()\n    }\n\n\n\n    const generateMessage = () => {\n        if (props.authenticated) return (\n            <Message\n                success\n                header='Form Completed'\n                content=\"You're all signed up for the website\"\n            />\n        )\n        else if (props.errorMessage) return (\n            <Message\n                error\n                header='Action Forbidden'\n                content='You can only sign up for an account once with a given e-mail address.'\n            />\n        )\n    }\n\n    const generateLoader = (loader) => {\n        if (loader) return <Loader/>\n        else return \n    }\n\n    return (\n        <div>\n            <div className={classes.header}>\n                <h2>Sign up</h2>\n            </div>\n            <div className={classes.login}>\n                <Segment placeholder className={classes.segment} id='test'>\n                    <Grid columns={2} relaxed='very' stackable>\n                        <Grid.Column>\n                            <Form onSubmit={handleSubmit}>\n                                <Form.Input\n                                    icon='user'\n                                    iconPosition='left'\n                                    label='Email'\n                                    placeholder='Email'\n                                    type='text'\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                />\n                                <Form.Input\n                                    icon='lock'\n                                    iconPosition='left'\n                                    label='Password'\n                                    placeholder='Password'\n                                    type='password'\n                                    value={password}\n                                    onChange={(e) => setPassword(e.target.value)}\n                                />\n\n                                <Button content='Sign up' primary type='submit' />\n\n                            </Form>\n                            {generateLoader(loader)}\n                            {generateMessage()}\n\n                        </Grid.Column>\n\n                        <Grid.Column verticalAlign='middle'>\n                            <p> </p>\n                            <Button\n                                content='Google account'\n                                icon='google'\n                                size='big'\n                                onClick={loginWithRedirect}\n                                color='google plus'\n                            />\n                        </Grid.Column>\n                    </Grid>\n                    <Divider vertical>Or</Divider>\n                </Segment>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = function (state) {\n    return { \n        authenticated: state.auth.authenticated,\n        errorMessage: state.auth.errorMessage }\n}\n\nexport default compose(\n    connect(mapStateToProps, actions),\n)(Signup)\n\n"],"sourceRoot":""}